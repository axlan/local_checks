#!/usr/bin/env python3

# this script can be used as a local check in check_mk
# https://docs.checkmk.com/latest/en/localchecks.html to make a server
# have a service monitoring a reolink camera. Outputs a string like:
# "P Reolink Battery=100;10:;5:|Wifi_RSSI=-66;-80:;-100: Roomba Status"

import time
import json
import os
import sys
from datetime import datetime, timedelta

from reolinkapi import Camera

from utils import ReturnStatus, Metric, print_result, get_recursively

SETTING_NAME = os.getenv('SETTING_NAME', 'Reolink')
SETTING_HOST = os.getenv('SETTING_HOST', '')
SETTING_USER = os.getenv('SETTING_USER', '')
SETTING_PASS = os.getenv('SETTING_PASS', '')

SETTING_MOTION_PERIOD = timedelta(hours=1)

SETTING_METRICS = [
    ('get_hdd_info', [
        (Metric("HDDCapacity", None, None, 1024, None), 'capacity'),
    ]),
    ('get_performance', [
        (Metric("CPU", None, 80, None, 90), 'cpuUsed'),
    ]),
    # Speical motion metric to count motion files in last day
    ('motion', [
        (Metric("MotionEvents", None, 2), 'motion'),
    ]),
]

# Get the local time on the camera
def get_time(cam: Camera) -> datetime:
    data = cam.get_dst()[0]['value']['Time']
    return datetime(data['year'], data['mon'], data['day'], data['hour'], data['min'], data['sec'])

# Get count of motion even files capture in the last SETTING_MOTION_PERIOD
def get_motion_event_count(cam) -> int:
    return len(cam.get_motion_files(get_time(cam) - SETTING_MOTION_PERIOD))

# Disable printing to stdout
def blockPrint():
    sys.stdout = open(os.devnull, 'w')

# Restore printing to stdout
def enablePrint():
    sys.stdout = sys.__stdout__

# Try to output the the Roomba status based on the SETTING variables
def main():
    blockPrint()
    try:
        cam = Camera(SETTING_HOST, SETTING_USER, SETTING_PASS)
        if cam is None:
            enablePrint()
            print(f'3 {SETTING_NAME} - Connection Failure')
            return
        metrics = []
        for cmd in SETTING_METRICS:
            # For motion metrics get motion count
            if cmd[0] == 'motion':
                result = {'motion': get_motion_event_count(cam)}
            # otherwise call the specified command
            else:
                getter_method = getattr(Camera, cmd[0])
                result = getter_method(cam)[0]
            for metric in cmd[1]:
                tmp = get_recursively(result, metric[1])
                if len(tmp) == 0:
                    tmp = None
                else:
                    tmp = tmp[0]
                metrics.append(metric[0].from_value(tmp))
        enablePrint()
        print_result(ReturnStatus.PROGRAMATIC, SETTING_NAME, metrics, f'{SETTING_NAME} Status')
    except Exception as e:
        enablePrint()
        print(f'3 {SETTING_NAME} - Script Failure {e}')


if __name__ == "__main__":
    main()
