#!/usr/bin/env python3

# This script is based on http://www.richwhitehouse.com/index.php?postid=72
# which in turn was based on https://github.com/koalazak/dorita980 which is
# an actually decent node implementation

# While it can be used as a library function to query Roomba status,
# this script can also be used as a local check in check_mk
# https://docs.checkmk.com/latest/en/localchecks.html to make a server
# have a service monitoring a roomba. Outputs a string like:
# "P Roomba Battery=100;10:;5:|Wifi_RSSI=-66;-80:;-100: Roomba Status"

import time
import os

from utils import ReturnStatus, Metric, print_result, get_recursively
from roomba import broadcastFindRoomba, getRoombaPassword, RoombaClient

# Don't use hard coded credentials, try to find a Roomba broadcasting its password
# See getRoombaPassword comment
SETTING_FIND_ROOMBA = bool(os.getenv('SETTING_FIND_ROOMBA', False))
SETTING_HOST = os.getenv('SETTING_HOST', '')
# For the username and password you can try the methods in this file
# or follow the guide in https://github.com/koalazak/dorita980#how-to-get-your-usernameblid-and-password
SETTING_ROOMBA_USER = os.getenv('SETTING_ROOMBA_USER', '')
SETTING_ROOMBA_PASS = os.getenv('SETTING_ROOMBA_PASS', '')
# This sets the metrics that will be queried along with the reported error thresholds
SETTING_METRICS = [
    # Metric, status key
    (Metric('Battery', 10, None, 5, None), 'batPct'),
    (Metric('Wifi_RSSI', -80, None, -100, None), 'rssi'),
]
SETTING_TIMEOUT = 10

# Try to output the the Roomba status based on the SETTING variables
def main():

    try:
        if SETTING_FIND_ROOMBA:
            try:
                roombas = broadcastFindRoomba()
                roomba = next(iter(roombas.values()))
                user = roomba['hostname'].split('-')[1]
                host = roomba['ip']
                password = getRoombaPassword(host)
                print(f'SETTING_HOST={host} SETTING_ROOMBA_USER={user} SETTING_ROOMBA_PASS={password}')
            except:
                print_result(ReturnStatus.CRIT, 'Roomba', [], 'Connection Failure')
        else:
            host = SETTING_HOST
            user = SETTING_ROOMBA_USER
            password = SETTING_ROOMBA_PASS
        client = RoombaClient(host, user, password)
        if not client.IsConnected():
            print_result(ReturnStatus.CRIT, 'Roomba', [], 'Connection Failure')
            return
        fields = [metric[1] for metric in SETTING_METRICS]
        state = client.GetState(fields, SETTING_TIMEOUT)
        #print(state)
        metrics = []
        for metric in SETTING_METRICS:
            tmp = get_recursively(state, metric[1])
            if len(tmp) == 0:
                tmp = None
            else:
                tmp = tmp[0]
            metrics.append(metric[0].from_value(tmp))
        print_result(ReturnStatus.PROGRAMATIC, 'Roomba', metrics, 'Roomba Status')
        client.CloseExistingMqtt()
    except Exception as e:
        print_result(ReturnStatus.CRIT, 'Roomba', [], f'Script Failure {e}')

if __name__ == "__main__":
    main()
