#!/usr/bin/env python3

# this script can be used as a local check in check_mk
# https://docs.checkmk.com/latest/en/localchecks.html to make a server
# have a service monitoring a Nest thermostat. Outputs a string like:
# "P Nest Connected=1;:;1:|Temp=22.4;18:25;:|Humidity=44;:;:|Heating=1;:;: Nest Status"

import time
import json
import os
import sys
import logging

import nest

from utils import ReturnStatus, Metric, print_result, get_recursively

SETTING_NAME = os.getenv('SETTING_NAME', "Nest")
SETTING_CONFIG_FILE = os.environ['SETTING_CONFIG_FILE']
SETTING_DEVICE_NAME = os.environ['SETTING_DEVICE_NAME']

SETTING_INTERACTIVE = False

SETTING_METRICS = [
    # Metric, evaluation function
    (Metric("Connected", 1, None, None, None), lambda x: int(x['Connectivity']['status'] == 'ONLINE')),
    (Metric("Heating", None, None, None, None), lambda x: int(x['ThermostatHvac']['status'] != 'OFF')),
    (Metric("Humidity", None, None, None, None), lambda x: x['Humidity']['ambientHumidityPercent']),
    (Metric("Temperature", 18, 26, None, None), lambda x: x['Temperature']['ambientTemperatureCelsius']),
]

def reautherize_callback(authorization_url):
    print('Please go to %s and authorize access.' % authorization_url)
    return input('Enter the full callback URL: ')

def main():
    try:
        with open(SETTING_CONFIG_FILE, 'r') as fd:
            config = json.load(fd)

        if SETTING_INTERACTIVE:
            logger = logging.getLogger('nest')
            logger.setLevel(logging.DEBUG)
            console_handler = logging.StreamHandler()
            formatter = logging.Formatter(
                "%(asctime)s %(levelname)s (%(threadName)s) "
                "[%(name)s] %(message)s", datefmt="%Y-%m-%d %H:%M:%S")
            console_handler.setFormatter(formatter)
            console_handler.setLevel(logging.DEBUG)
            logger.addHandler(console_handler)

            config['reautherize_callback'] = reautherize_callback

        with nest.Nest(**config) as nest_api:
            device_traits = nest_api.get_devices(names=[SETTING_DEVICE_NAME])[0].traits
            metrics = []
            for metric in SETTING_METRICS:
                tmp = metric[1](device_traits)
                metrics.append(metric[0].from_value(tmp))
            print_result(ReturnStatus.PROGRAMATIC, SETTING_NAME, metrics, f'{SETTING_NAME} Status')
    except nest.AuthorizationError:
        print(f'3 {SETTING_NAME} - Authorization Failure')
    except Exception as e:
        print(f'3 {SETTING_NAME} - Script Failure {e}')

if __name__ == "__main__":
    main()
